
temperatuur.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000538  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  000005ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d4  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073c  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c5  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042e  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014d  00000000  00000000  00001f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002063  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 30       	cpi	r26, 0x0D	; 13
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  88:	0c 94 9a 02 	jmp	0x534	; 0x534 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <uart_init>:
double tempC;

void uart_init()
{
	// set the baud rate
	UBRR0H = 0;
  90:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBBRVAL;     	// disable U2X mode
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0A = 0;		        // enable transmitter
  9a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = _BV(TXEN0); 	// enable receiver
  9e:	e1 ec       	ldi	r30, 0xC1	; 193
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	88 e0       	ldi	r24, 0x08	; 8
  a4:	80 83       	st	Z, r24
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	80 83       	st	Z, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  b0:	08 95       	ret

000000b2 <init_adc>:

void init_adc()
{
	// ref=Vcc, left adjust the result (8 bit resolution),
	// select channel 0 (PC0 = input)
	ADMUX = (1<<REFS0)|(1<<ADLAR);
  b2:	80 e6       	ldi	r24, 0x60	; 96
  b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  b8:	87 e8       	ldi	r24, 0x87	; 135
  ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  be:	08 95       	ret

000000c0 <get_adc_value>:
}
uint8_t get_adc_value()
{
	ADCSRA |= (1<<ADSC); // start conversion
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
  ca:	80 81       	ld	r24, Z
  cc:	86 fd       	sbrc	r24, 6
  ce:	fd cf       	rjmp	.-6      	; 0xca <get_adc_value+0xa>
	return ADCH; // 8-bit resolution, left adjusted
  d0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  d4:	08 95       	ret

000000d6 <transmit>:

void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
  d6:	e0 ec       	ldi	r30, 0xC0	; 192
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	90 81       	ld	r25, Z
  dc:	95 ff       	sbrs	r25, 5
  de:	fd cf       	rjmp	.-6      	; 0xda <transmit+0x4>
	// send the data
	UDR0 = data;
  e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  e4:	08 95       	ret

000000e6 <receive>:
}

uint8_t receive()
{
	loop_until_bit_is_set(UCSR0A, RXC0);
  e6:	e0 ec       	ldi	r30, 0xC0	; 192
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 23       	and	r24, r24
  ee:	ec f7       	brge	.-6      	; 0xea <receive+0x4>
	return UDR0;   // return the data
  f0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  f4:	08 95       	ret

000000f6 <led>:

void led(uint8_t onoff){

	
	while(onoff == 0x0e){
  f6:	8e 30       	cpi	r24, 0x0E	; 14
  f8:	b1 f4       	brne	.+44     	; 0x126 <led+0x30>
		PORTB = 0x02;
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	39 e6       	ldi	r19, 0x69	; 105
 102:	98 e1       	ldi	r25, 0x18	; 24
 104:	21 50       	subi	r18, 0x01	; 1
 106:	30 40       	sbci	r19, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <led+0xe>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <led+0x18>
 10e:	00 00       	nop
		_delay_ms(500);
		PORTB = 0x00;
 110:	15 b8       	out	0x05, r1	; 5
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	39 e6       	ldi	r19, 0x69	; 105
 116:	98 e1       	ldi	r25, 0x18	; 24
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	30 40       	sbci	r19, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <led+0x22>
 120:	00 c0       	rjmp	.+0      	; 0x122 <led+0x2c>
 122:	00 00       	nop
 124:	eb cf       	rjmp	.-42     	; 0xfc <led+0x6>
		_delay_ms(500);
	}

	if(onoff == 0xff){                   //rode led gaat aan (hij is ingerold dus)
 126:	8f 3f       	cpi	r24, 0xFF	; 255
 128:	19 f4       	brne	.+6      	; 0x130 <led+0x3a>
		PORTB = 0x01;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	85 b9       	out	0x05, r24	; 5
 12e:	08 95       	ret
	}
	else if(onoff == 0x0f){               //Groene led gaat aan (hij is uitgerold dus)
 130:	8f 30       	cpi	r24, 0x0F	; 15
 132:	11 f4       	brne	.+4      	; 0x138 <led+0x42>
		PORTB = 0x04;
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	85 b9       	out	0x05, r24	; 5
 138:	08 95       	ret

0000013a <recieving>:
	}
}

void recieving()
{
 13a:	cf 93       	push	r28
	temp = receive();
 13c:	0e 94 73 00 	call	0xe6	; 0xe6 <receive>
 140:	c8 2f       	mov	r28, r24
 142:	68 2f       	mov	r22, r24
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 9f 01 	call	0x33e	; 0x33e <__floatunsisf>
 14e:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temp>
 152:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temp+0x1>
 156:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp+0x2>
 15a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <temp+0x3>
	led(temp);
 15e:	8c 2f       	mov	r24, r28
 160:	0e 94 7b 00 	call	0xf6	; 0xf6 <led>
}
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <main>:

int main(void)
{
    uart_init();
 168:	0e 94 48 00 	call	0x90	; 0x90 <uart_init>
	init_adc();
 16c:	0e 94 59 00 	call	0xb2	; 0xb2 <init_adc>
	DDRB = 0xff;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	84 b9       	out	0x04, r24	; 4
		analog = get_adc_value();
		voltage = analog * 0.004882814 * 5000;
		tempC = (voltage - 500) * 0.1;
		transmit(tempC);
		
		if(UDR0 != 0x00){
 174:	c6 ec       	ldi	r28, 0xC6	; 198
 176:	d0 e0       	ldi	r29, 0x00	; 0
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	80 e7       	ldi	r24, 0x70	; 112
 17c:	92 e0       	ldi	r25, 0x02	; 2
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x16>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x20>
 188:	00 00       	nop
	init_adc();
	DDRB = 0xff;
    while (1) 
    {
		_delay_ms(50);
		analog = get_adc_value();
 18a:	0e 94 60 00 	call	0xc0	; 0xc0 <get_adc_value>
 18e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		voltage = analog * 0.004882814 * 5000;
 192:	68 2f       	mov	r22, r24
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 a1 01 	call	0x342	; 0x342 <__floatsisf>
 19e:	23 e0       	ldi	r18, 0x03	; 3
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 ea       	ldi	r20, 0xA0	; 160
 1a4:	5b e3       	ldi	r21, 0x3B	; 59
 1a6:	0e 94 2d 02 	call	0x45a	; 0x45a <__mulsf3>
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e4       	ldi	r19, 0x40	; 64
 1ae:	4c e9       	ldi	r20, 0x9C	; 156
 1b0:	55 e4       	ldi	r21, 0x45	; 69
 1b2:	0e 94 2d 02 	call	0x45a	; 0x45a <__mulsf3>
 1b6:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <voltage>
 1ba:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <voltage+0x1>
 1be:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <voltage+0x2>
 1c2:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <voltage+0x3>
		tempC = (voltage - 500) * 0.1;
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	4a ef       	ldi	r20, 0xFA	; 250
 1cc:	53 e4       	ldi	r21, 0x43	; 67
 1ce:	0e 94 03 01 	call	0x206	; 0x206 <__subsf3>
 1d2:	2d ec       	ldi	r18, 0xCD	; 205
 1d4:	3c ec       	ldi	r19, 0xCC	; 204
 1d6:	4c ec       	ldi	r20, 0xCC	; 204
 1d8:	5d e3       	ldi	r21, 0x3D	; 61
 1da:	0e 94 2d 02 	call	0x45a	; 0x45a <__mulsf3>
 1de:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <tempC>
 1e2:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <tempC+0x1>
 1e6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tempC+0x2>
 1ea:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <tempC+0x3>
		transmit(tempC);
 1ee:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__fixunssfsi>
 1f2:	86 2f       	mov	r24, r22
 1f4:	0e 94 6b 00 	call	0xd6	; 0xd6 <transmit>
		
		if(UDR0 != 0x00){
 1f8:	88 81       	ld	r24, Y
 1fa:	88 23       	and	r24, r24
 1fc:	09 f4       	brne	.+2      	; 0x200 <main+0x98>
 1fe:	bc cf       	rjmp	.-136    	; 0x178 <main+0x10>
			recieving();
 200:	0e 94 9d 00 	call	0x13a	; 0x13a <recieving>
 204:	b9 cf       	rjmp	.-142    	; 0x178 <main+0x10>

00000206 <__subsf3>:
 206:	50 58       	subi	r21, 0x80	; 128

00000208 <__addsf3>:
 208:	bb 27       	eor	r27, r27
 20a:	aa 27       	eor	r26, r26
 20c:	0e 94 1b 01 	call	0x236	; 0x236 <__addsf3x>
 210:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__fp_round>
 214:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__fp_pscA>
 218:	38 f0       	brcs	.+14     	; 0x228 <__addsf3+0x20>
 21a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__fp_pscB>
 21e:	20 f0       	brcs	.+8      	; 0x228 <__addsf3+0x20>
 220:	39 f4       	brne	.+14     	; 0x230 <__addsf3+0x28>
 222:	9f 3f       	cpi	r25, 0xFF	; 255
 224:	19 f4       	brne	.+6      	; 0x22c <__addsf3+0x24>
 226:	26 f4       	brtc	.+8      	; 0x230 <__addsf3+0x28>
 228:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__fp_nan>
 22c:	0e f4       	brtc	.+2      	; 0x230 <__addsf3+0x28>
 22e:	e0 95       	com	r30
 230:	e7 fb       	bst	r30, 7
 232:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__fp_inf>

00000236 <__addsf3x>:
 236:	e9 2f       	mov	r30, r25
 238:	0e 94 04 02 	call	0x408	; 0x408 <__fp_split3>
 23c:	58 f3       	brcs	.-42     	; 0x214 <__addsf3+0xc>
 23e:	ba 17       	cp	r27, r26
 240:	62 07       	cpc	r22, r18
 242:	73 07       	cpc	r23, r19
 244:	84 07       	cpc	r24, r20
 246:	95 07       	cpc	r25, r21
 248:	20 f0       	brcs	.+8      	; 0x252 <__addsf3x+0x1c>
 24a:	79 f4       	brne	.+30     	; 0x26a <__addsf3x+0x34>
 24c:	a6 f5       	brtc	.+104    	; 0x2b6 <__addsf3x+0x80>
 24e:	0c 94 26 02 	jmp	0x44c	; 0x44c <__fp_zero>
 252:	0e f4       	brtc	.+2      	; 0x256 <__addsf3x+0x20>
 254:	e0 95       	com	r30
 256:	0b 2e       	mov	r0, r27
 258:	ba 2f       	mov	r27, r26
 25a:	a0 2d       	mov	r26, r0
 25c:	0b 01       	movw	r0, r22
 25e:	b9 01       	movw	r22, r18
 260:	90 01       	movw	r18, r0
 262:	0c 01       	movw	r0, r24
 264:	ca 01       	movw	r24, r20
 266:	a0 01       	movw	r20, r0
 268:	11 24       	eor	r1, r1
 26a:	ff 27       	eor	r31, r31
 26c:	59 1b       	sub	r21, r25
 26e:	99 f0       	breq	.+38     	; 0x296 <__addsf3x+0x60>
 270:	59 3f       	cpi	r21, 0xF9	; 249
 272:	50 f4       	brcc	.+20     	; 0x288 <__addsf3x+0x52>
 274:	50 3e       	cpi	r21, 0xE0	; 224
 276:	68 f1       	brcs	.+90     	; 0x2d2 <__addsf3x+0x9c>
 278:	1a 16       	cp	r1, r26
 27a:	f0 40       	sbci	r31, 0x00	; 0
 27c:	a2 2f       	mov	r26, r18
 27e:	23 2f       	mov	r18, r19
 280:	34 2f       	mov	r19, r20
 282:	44 27       	eor	r20, r20
 284:	58 5f       	subi	r21, 0xF8	; 248
 286:	f3 cf       	rjmp	.-26     	; 0x26e <__addsf3x+0x38>
 288:	46 95       	lsr	r20
 28a:	37 95       	ror	r19
 28c:	27 95       	ror	r18
 28e:	a7 95       	ror	r26
 290:	f0 40       	sbci	r31, 0x00	; 0
 292:	53 95       	inc	r21
 294:	c9 f7       	brne	.-14     	; 0x288 <__addsf3x+0x52>
 296:	7e f4       	brtc	.+30     	; 0x2b6 <__addsf3x+0x80>
 298:	1f 16       	cp	r1, r31
 29a:	ba 0b       	sbc	r27, r26
 29c:	62 0b       	sbc	r22, r18
 29e:	73 0b       	sbc	r23, r19
 2a0:	84 0b       	sbc	r24, r20
 2a2:	ba f0       	brmi	.+46     	; 0x2d2 <__addsf3x+0x9c>
 2a4:	91 50       	subi	r25, 0x01	; 1
 2a6:	a1 f0       	breq	.+40     	; 0x2d0 <__addsf3x+0x9a>
 2a8:	ff 0f       	add	r31, r31
 2aa:	bb 1f       	adc	r27, r27
 2ac:	66 1f       	adc	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	88 1f       	adc	r24, r24
 2b2:	c2 f7       	brpl	.-16     	; 0x2a4 <__addsf3x+0x6e>
 2b4:	0e c0       	rjmp	.+28     	; 0x2d2 <__addsf3x+0x9c>
 2b6:	ba 0f       	add	r27, r26
 2b8:	62 1f       	adc	r22, r18
 2ba:	73 1f       	adc	r23, r19
 2bc:	84 1f       	adc	r24, r20
 2be:	48 f4       	brcc	.+18     	; 0x2d2 <__addsf3x+0x9c>
 2c0:	87 95       	ror	r24
 2c2:	77 95       	ror	r23
 2c4:	67 95       	ror	r22
 2c6:	b7 95       	ror	r27
 2c8:	f7 95       	ror	r31
 2ca:	9e 3f       	cpi	r25, 0xFE	; 254
 2cc:	08 f0       	brcs	.+2      	; 0x2d0 <__addsf3x+0x9a>
 2ce:	b0 cf       	rjmp	.-160    	; 0x230 <__addsf3+0x28>
 2d0:	93 95       	inc	r25
 2d2:	88 0f       	add	r24, r24
 2d4:	08 f0       	brcs	.+2      	; 0x2d8 <__addsf3x+0xa2>
 2d6:	99 27       	eor	r25, r25
 2d8:	ee 0f       	add	r30, r30
 2da:	97 95       	ror	r25
 2dc:	87 95       	ror	r24
 2de:	08 95       	ret

000002e0 <__fixunssfsi>:
 2e0:	0e 94 0c 02 	call	0x418	; 0x418 <__fp_splitA>
 2e4:	88 f0       	brcs	.+34     	; 0x308 <__fixunssfsi+0x28>
 2e6:	9f 57       	subi	r25, 0x7F	; 127
 2e8:	98 f0       	brcs	.+38     	; 0x310 <__fixunssfsi+0x30>
 2ea:	b9 2f       	mov	r27, r25
 2ec:	99 27       	eor	r25, r25
 2ee:	b7 51       	subi	r27, 0x17	; 23
 2f0:	b0 f0       	brcs	.+44     	; 0x31e <__fixunssfsi+0x3e>
 2f2:	e1 f0       	breq	.+56     	; 0x32c <__fixunssfsi+0x4c>
 2f4:	66 0f       	add	r22, r22
 2f6:	77 1f       	adc	r23, r23
 2f8:	88 1f       	adc	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	1a f0       	brmi	.+6      	; 0x304 <__fixunssfsi+0x24>
 2fe:	ba 95       	dec	r27
 300:	c9 f7       	brne	.-14     	; 0x2f4 <__fixunssfsi+0x14>
 302:	14 c0       	rjmp	.+40     	; 0x32c <__fixunssfsi+0x4c>
 304:	b1 30       	cpi	r27, 0x01	; 1
 306:	91 f0       	breq	.+36     	; 0x32c <__fixunssfsi+0x4c>
 308:	0e 94 26 02 	call	0x44c	; 0x44c <__fp_zero>
 30c:	b1 e0       	ldi	r27, 0x01	; 1
 30e:	08 95       	ret
 310:	0c 94 26 02 	jmp	0x44c	; 0x44c <__fp_zero>
 314:	67 2f       	mov	r22, r23
 316:	78 2f       	mov	r23, r24
 318:	88 27       	eor	r24, r24
 31a:	b8 5f       	subi	r27, 0xF8	; 248
 31c:	39 f0       	breq	.+14     	; 0x32c <__fixunssfsi+0x4c>
 31e:	b9 3f       	cpi	r27, 0xF9	; 249
 320:	cc f3       	brlt	.-14     	; 0x314 <__fixunssfsi+0x34>
 322:	86 95       	lsr	r24
 324:	77 95       	ror	r23
 326:	67 95       	ror	r22
 328:	b3 95       	inc	r27
 32a:	d9 f7       	brne	.-10     	; 0x322 <__fixunssfsi+0x42>
 32c:	3e f4       	brtc	.+14     	; 0x33c <__fixunssfsi+0x5c>
 32e:	90 95       	com	r25
 330:	80 95       	com	r24
 332:	70 95       	com	r23
 334:	61 95       	neg	r22
 336:	7f 4f       	sbci	r23, 0xFF	; 255
 338:	8f 4f       	sbci	r24, 0xFF	; 255
 33a:	9f 4f       	sbci	r25, 0xFF	; 255
 33c:	08 95       	ret

0000033e <__floatunsisf>:
 33e:	e8 94       	clt
 340:	09 c0       	rjmp	.+18     	; 0x354 <__floatsisf+0x12>

00000342 <__floatsisf>:
 342:	97 fb       	bst	r25, 7
 344:	3e f4       	brtc	.+14     	; 0x354 <__floatsisf+0x12>
 346:	90 95       	com	r25
 348:	80 95       	com	r24
 34a:	70 95       	com	r23
 34c:	61 95       	neg	r22
 34e:	7f 4f       	sbci	r23, 0xFF	; 255
 350:	8f 4f       	sbci	r24, 0xFF	; 255
 352:	9f 4f       	sbci	r25, 0xFF	; 255
 354:	99 23       	and	r25, r25
 356:	a9 f0       	breq	.+42     	; 0x382 <__floatsisf+0x40>
 358:	f9 2f       	mov	r31, r25
 35a:	96 e9       	ldi	r25, 0x96	; 150
 35c:	bb 27       	eor	r27, r27
 35e:	93 95       	inc	r25
 360:	f6 95       	lsr	r31
 362:	87 95       	ror	r24
 364:	77 95       	ror	r23
 366:	67 95       	ror	r22
 368:	b7 95       	ror	r27
 36a:	f1 11       	cpse	r31, r1
 36c:	f8 cf       	rjmp	.-16     	; 0x35e <__floatsisf+0x1c>
 36e:	fa f4       	brpl	.+62     	; 0x3ae <__floatsisf+0x6c>
 370:	bb 0f       	add	r27, r27
 372:	11 f4       	brne	.+4      	; 0x378 <__floatsisf+0x36>
 374:	60 ff       	sbrs	r22, 0
 376:	1b c0       	rjmp	.+54     	; 0x3ae <__floatsisf+0x6c>
 378:	6f 5f       	subi	r22, 0xFF	; 255
 37a:	7f 4f       	sbci	r23, 0xFF	; 255
 37c:	8f 4f       	sbci	r24, 0xFF	; 255
 37e:	9f 4f       	sbci	r25, 0xFF	; 255
 380:	16 c0       	rjmp	.+44     	; 0x3ae <__floatsisf+0x6c>
 382:	88 23       	and	r24, r24
 384:	11 f0       	breq	.+4      	; 0x38a <__floatsisf+0x48>
 386:	96 e9       	ldi	r25, 0x96	; 150
 388:	11 c0       	rjmp	.+34     	; 0x3ac <__floatsisf+0x6a>
 38a:	77 23       	and	r23, r23
 38c:	21 f0       	breq	.+8      	; 0x396 <__floatsisf+0x54>
 38e:	9e e8       	ldi	r25, 0x8E	; 142
 390:	87 2f       	mov	r24, r23
 392:	76 2f       	mov	r23, r22
 394:	05 c0       	rjmp	.+10     	; 0x3a0 <__floatsisf+0x5e>
 396:	66 23       	and	r22, r22
 398:	71 f0       	breq	.+28     	; 0x3b6 <__floatsisf+0x74>
 39a:	96 e8       	ldi	r25, 0x86	; 134
 39c:	86 2f       	mov	r24, r22
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	2a f0       	brmi	.+10     	; 0x3ae <__floatsisf+0x6c>
 3a4:	9a 95       	dec	r25
 3a6:	66 0f       	add	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	88 1f       	adc	r24, r24
 3ac:	da f7       	brpl	.-10     	; 0x3a4 <__floatsisf+0x62>
 3ae:	88 0f       	add	r24, r24
 3b0:	96 95       	lsr	r25
 3b2:	87 95       	ror	r24
 3b4:	97 f9       	bld	r25, 7
 3b6:	08 95       	ret

000003b8 <__fp_inf>:
 3b8:	97 f9       	bld	r25, 7
 3ba:	9f 67       	ori	r25, 0x7F	; 127
 3bc:	80 e8       	ldi	r24, 0x80	; 128
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	08 95       	ret

000003c4 <__fp_nan>:
 3c4:	9f ef       	ldi	r25, 0xFF	; 255
 3c6:	80 ec       	ldi	r24, 0xC0	; 192
 3c8:	08 95       	ret

000003ca <__fp_pscA>:
 3ca:	00 24       	eor	r0, r0
 3cc:	0a 94       	dec	r0
 3ce:	16 16       	cp	r1, r22
 3d0:	17 06       	cpc	r1, r23
 3d2:	18 06       	cpc	r1, r24
 3d4:	09 06       	cpc	r0, r25
 3d6:	08 95       	ret

000003d8 <__fp_pscB>:
 3d8:	00 24       	eor	r0, r0
 3da:	0a 94       	dec	r0
 3dc:	12 16       	cp	r1, r18
 3de:	13 06       	cpc	r1, r19
 3e0:	14 06       	cpc	r1, r20
 3e2:	05 06       	cpc	r0, r21
 3e4:	08 95       	ret

000003e6 <__fp_round>:
 3e6:	09 2e       	mov	r0, r25
 3e8:	03 94       	inc	r0
 3ea:	00 0c       	add	r0, r0
 3ec:	11 f4       	brne	.+4      	; 0x3f2 <__fp_round+0xc>
 3ee:	88 23       	and	r24, r24
 3f0:	52 f0       	brmi	.+20     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f2:	bb 0f       	add	r27, r27
 3f4:	40 f4       	brcc	.+16     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f6:	bf 2b       	or	r27, r31
 3f8:	11 f4       	brne	.+4      	; 0x3fe <__fp_round+0x18>
 3fa:	60 ff       	sbrs	r22, 0
 3fc:	04 c0       	rjmp	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fe:	6f 5f       	subi	r22, 0xFF	; 255
 400:	7f 4f       	sbci	r23, 0xFF	; 255
 402:	8f 4f       	sbci	r24, 0xFF	; 255
 404:	9f 4f       	sbci	r25, 0xFF	; 255
 406:	08 95       	ret

00000408 <__fp_split3>:
 408:	57 fd       	sbrc	r21, 7
 40a:	90 58       	subi	r25, 0x80	; 128
 40c:	44 0f       	add	r20, r20
 40e:	55 1f       	adc	r21, r21
 410:	59 f0       	breq	.+22     	; 0x428 <__fp_splitA+0x10>
 412:	5f 3f       	cpi	r21, 0xFF	; 255
 414:	71 f0       	breq	.+28     	; 0x432 <__fp_splitA+0x1a>
 416:	47 95       	ror	r20

00000418 <__fp_splitA>:
 418:	88 0f       	add	r24, r24
 41a:	97 fb       	bst	r25, 7
 41c:	99 1f       	adc	r25, r25
 41e:	61 f0       	breq	.+24     	; 0x438 <__fp_splitA+0x20>
 420:	9f 3f       	cpi	r25, 0xFF	; 255
 422:	79 f0       	breq	.+30     	; 0x442 <__fp_splitA+0x2a>
 424:	87 95       	ror	r24
 426:	08 95       	ret
 428:	12 16       	cp	r1, r18
 42a:	13 06       	cpc	r1, r19
 42c:	14 06       	cpc	r1, r20
 42e:	55 1f       	adc	r21, r21
 430:	f2 cf       	rjmp	.-28     	; 0x416 <__fp_split3+0xe>
 432:	46 95       	lsr	r20
 434:	f1 df       	rcall	.-30     	; 0x418 <__fp_splitA>
 436:	08 c0       	rjmp	.+16     	; 0x448 <__fp_splitA+0x30>
 438:	16 16       	cp	r1, r22
 43a:	17 06       	cpc	r1, r23
 43c:	18 06       	cpc	r1, r24
 43e:	99 1f       	adc	r25, r25
 440:	f1 cf       	rjmp	.-30     	; 0x424 <__fp_splitA+0xc>
 442:	86 95       	lsr	r24
 444:	71 05       	cpc	r23, r1
 446:	61 05       	cpc	r22, r1
 448:	08 94       	sec
 44a:	08 95       	ret

0000044c <__fp_zero>:
 44c:	e8 94       	clt

0000044e <__fp_szero>:
 44e:	bb 27       	eor	r27, r27
 450:	66 27       	eor	r22, r22
 452:	77 27       	eor	r23, r23
 454:	cb 01       	movw	r24, r22
 456:	97 f9       	bld	r25, 7
 458:	08 95       	ret

0000045a <__mulsf3>:
 45a:	0e 94 40 02 	call	0x480	; 0x480 <__mulsf3x>
 45e:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__fp_round>
 462:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__fp_pscA>
 466:	38 f0       	brcs	.+14     	; 0x476 <__mulsf3+0x1c>
 468:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__fp_pscB>
 46c:	20 f0       	brcs	.+8      	; 0x476 <__mulsf3+0x1c>
 46e:	95 23       	and	r25, r21
 470:	11 f0       	breq	.+4      	; 0x476 <__mulsf3+0x1c>
 472:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__fp_inf>
 476:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__fp_nan>
 47a:	11 24       	eor	r1, r1
 47c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__fp_szero>

00000480 <__mulsf3x>:
 480:	0e 94 04 02 	call	0x408	; 0x408 <__fp_split3>
 484:	70 f3       	brcs	.-36     	; 0x462 <__mulsf3+0x8>

00000486 <__mulsf3_pse>:
 486:	95 9f       	mul	r25, r21
 488:	c1 f3       	breq	.-16     	; 0x47a <__mulsf3+0x20>
 48a:	95 0f       	add	r25, r21
 48c:	50 e0       	ldi	r21, 0x00	; 0
 48e:	55 1f       	adc	r21, r21
 490:	62 9f       	mul	r22, r18
 492:	f0 01       	movw	r30, r0
 494:	72 9f       	mul	r23, r18
 496:	bb 27       	eor	r27, r27
 498:	f0 0d       	add	r31, r0
 49a:	b1 1d       	adc	r27, r1
 49c:	63 9f       	mul	r22, r19
 49e:	aa 27       	eor	r26, r26
 4a0:	f0 0d       	add	r31, r0
 4a2:	b1 1d       	adc	r27, r1
 4a4:	aa 1f       	adc	r26, r26
 4a6:	64 9f       	mul	r22, r20
 4a8:	66 27       	eor	r22, r22
 4aa:	b0 0d       	add	r27, r0
 4ac:	a1 1d       	adc	r26, r1
 4ae:	66 1f       	adc	r22, r22
 4b0:	82 9f       	mul	r24, r18
 4b2:	22 27       	eor	r18, r18
 4b4:	b0 0d       	add	r27, r0
 4b6:	a1 1d       	adc	r26, r1
 4b8:	62 1f       	adc	r22, r18
 4ba:	73 9f       	mul	r23, r19
 4bc:	b0 0d       	add	r27, r0
 4be:	a1 1d       	adc	r26, r1
 4c0:	62 1f       	adc	r22, r18
 4c2:	83 9f       	mul	r24, r19
 4c4:	a0 0d       	add	r26, r0
 4c6:	61 1d       	adc	r22, r1
 4c8:	22 1f       	adc	r18, r18
 4ca:	74 9f       	mul	r23, r20
 4cc:	33 27       	eor	r19, r19
 4ce:	a0 0d       	add	r26, r0
 4d0:	61 1d       	adc	r22, r1
 4d2:	23 1f       	adc	r18, r19
 4d4:	84 9f       	mul	r24, r20
 4d6:	60 0d       	add	r22, r0
 4d8:	21 1d       	adc	r18, r1
 4da:	82 2f       	mov	r24, r18
 4dc:	76 2f       	mov	r23, r22
 4de:	6a 2f       	mov	r22, r26
 4e0:	11 24       	eor	r1, r1
 4e2:	9f 57       	subi	r25, 0x7F	; 127
 4e4:	50 40       	sbci	r21, 0x00	; 0
 4e6:	9a f0       	brmi	.+38     	; 0x50e <__mulsf3_pse+0x88>
 4e8:	f1 f0       	breq	.+60     	; 0x526 <__mulsf3_pse+0xa0>
 4ea:	88 23       	and	r24, r24
 4ec:	4a f0       	brmi	.+18     	; 0x500 <__mulsf3_pse+0x7a>
 4ee:	ee 0f       	add	r30, r30
 4f0:	ff 1f       	adc	r31, r31
 4f2:	bb 1f       	adc	r27, r27
 4f4:	66 1f       	adc	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	88 1f       	adc	r24, r24
 4fa:	91 50       	subi	r25, 0x01	; 1
 4fc:	50 40       	sbci	r21, 0x00	; 0
 4fe:	a9 f7       	brne	.-22     	; 0x4ea <__mulsf3_pse+0x64>
 500:	9e 3f       	cpi	r25, 0xFE	; 254
 502:	51 05       	cpc	r21, r1
 504:	80 f0       	brcs	.+32     	; 0x526 <__mulsf3_pse+0xa0>
 506:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__fp_inf>
 50a:	0c 94 27 02 	jmp	0x44e	; 0x44e <__fp_szero>
 50e:	5f 3f       	cpi	r21, 0xFF	; 255
 510:	e4 f3       	brlt	.-8      	; 0x50a <__mulsf3_pse+0x84>
 512:	98 3e       	cpi	r25, 0xE8	; 232
 514:	d4 f3       	brlt	.-12     	; 0x50a <__mulsf3_pse+0x84>
 516:	86 95       	lsr	r24
 518:	77 95       	ror	r23
 51a:	67 95       	ror	r22
 51c:	b7 95       	ror	r27
 51e:	f7 95       	ror	r31
 520:	e7 95       	ror	r30
 522:	9f 5f       	subi	r25, 0xFF	; 255
 524:	c1 f7       	brne	.-16     	; 0x516 <__mulsf3_pse+0x90>
 526:	fe 2b       	or	r31, r30
 528:	88 0f       	add	r24, r24
 52a:	91 1d       	adc	r25, r1
 52c:	96 95       	lsr	r25
 52e:	87 95       	ror	r24
 530:	97 f9       	bld	r25, 7
 532:	08 95       	ret

00000534 <_exit>:
 534:	f8 94       	cli

00000536 <__stop_program>:
 536:	ff cf       	rjmp	.-2      	; 0x536 <__stop_program>
