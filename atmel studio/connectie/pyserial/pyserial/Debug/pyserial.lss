
pyserial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000942  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076b  00000000  00000000  00000c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003dd  00000000  00000000  0000138d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000439  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000156  00000000  00000000  00001c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001d8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  88:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <uart_init>:


void uart_init()
{
	// set the baud rate
	UBRR0H = 0;
  90:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBBRVAL;     	// disable U2X mode
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0A = 0;		        // enable transmitter
  9a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = _BV(TXEN0); 	// enable receiver
  9e:	e1 ec       	ldi	r30, 0xC1	; 193
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	88 e0       	ldi	r24, 0x08	; 8
  a4:	80 83       	st	Z, r24
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	80 83       	st	Z, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  b0:	08 95       	ret

000000b2 <transmit>:
}
void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	95 ff       	sbrs	r25, 5
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <transmit+0x4>
	// send the data
	UDR0 = data;
  bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  c0:	08 95       	ret

000000c2 <receive>:
}
uint8_t receive()
{  
	loop_until_bit_is_set(UCSR0A, RXC0);  
  c2:	e0 ec       	ldi	r30, 0xC0	; 192
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 23       	and	r24, r24
  ca:	ec f7       	brge	.-6      	; 0xc6 <receive+0x4>
	return UDR0;   // return the data 
  cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  d0:	08 95       	ret

000000d2 <insertOutput>:
	
void insertOutput(int count)
{
	ultrasoonData = count;
  d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ultrasoonData>
	light = count + 1;
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	98 0f       	add	r25, r24
  da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <light>
	temperature = count + 2;	
  de:	8e 5f       	subi	r24, 0xFE	; 254
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  e4:	08 95       	ret

000000e6 <led>:
void led(uint8_t onoff){
    int a;
	int b;
	onoff;
    
    if(onoff == 0x0e){
  e6:	8e 30       	cpi	r24, 0x0E	; 14
  e8:	d1 f4       	brne	.+52     	; 0x11e <led+0x38>
  ea:	8a e0       	ldi	r24, 0x0A	; 10
  ec:	90 e0       	ldi	r25, 0x00	; 0
        for (a = 0; a < 10; a = a + 1)
        {
            PORTB = 0x02;
  ee:	22 e0       	ldi	r18, 0x02	; 2
  f0:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	3f ef       	ldi	r19, 0xFF	; 255
  f4:	41 ee       	ldi	r20, 0xE1	; 225
  f6:	54 e0       	ldi	r21, 0x04	; 4
  f8:	31 50       	subi	r19, 0x01	; 1
  fa:	40 40       	sbci	r20, 0x00	; 0
  fc:	50 40       	sbci	r21, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <led+0x12>
 100:	00 c0       	rjmp	.+0      	; 0x102 <led+0x1c>
 102:	00 00       	nop
            _delay_ms(100);
            PORTB = 0x00;
 104:	15 b8       	out	0x05, r1	; 5
 106:	3f ef       	ldi	r19, 0xFF	; 255
 108:	41 ee       	ldi	r20, 0xE1	; 225
 10a:	54 e0       	ldi	r21, 0x04	; 4
 10c:	31 50       	subi	r19, 0x01	; 1
 10e:	40 40       	sbci	r20, 0x00	; 0
 110:	50 40       	sbci	r21, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <led+0x26>
 114:	00 c0       	rjmp	.+0      	; 0x116 <led+0x30>
 116:	00 00       	nop
 118:	01 97       	sbiw	r24, 0x01	; 1
    int a;
	int b;
	onoff;
    
    if(onoff == 0x0e){
        for (a = 0; a < 10; a = a + 1)
 11a:	51 f7       	brne	.-44     	; 0xf0 <led+0xa>
 11c:	08 95       	ret
            PORTB = 0x00;
            _delay_ms(100);
        }
    }

    if(onoff == 0xff){                   //rode led gaat aan (hij is ingerold dus)
 11e:	8f 3f       	cpi	r24, 0xFF	; 255
 120:	19 f4       	brne	.+6      	; 0x128 <led+0x42>
        PORTB = 0x01;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	85 b9       	out	0x05, r24	; 5
 126:	08 95       	ret
    }
    else if(onoff == 0x0f){               //Groene led gaat aan (hij is uitgerold dus)
 128:	8f 30       	cpi	r24, 0x0F	; 15
 12a:	11 f4       	brne	.+4      	; 0x130 <led+0x4a>
        PORTB = 0x04;
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	85 b9       	out	0x05, r24	; 5
 130:	08 95       	ret

00000132 <recieving>:
    }
}

void recieving()
{
	temp = receive();
 132:	0e 94 61 00 	call	0xc2	; 0xc2 <receive>
 136:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp>
	transmit(temp);
 13a:	0e 94 59 00 	call	0xb2	; 0xb2 <transmit>
	led(temp);
 13e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <temp>
 142:	0e 94 73 00 	call	0xe6	; 0xe6 <led>
 146:	08 95       	ret

00000148 <sending>:
}

void sending()
{
	counter = counter + 1;
 148:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <counter>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <counter>
	int thisisavalue = counter;
	insertOutput(thisisavalue);
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 69 00 	call	0xd2	; 0xd2 <insertOutput>
	transmit(ultrasoonData);
 158:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ultrasoonData>
 15c:	0e 94 59 00 	call	0xb2	; 0xb2 <transmit>
	transmit(light);
 160:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <light>
 164:	0e 94 59 00 	call	0xb2	; 0xb2 <transmit>
	transmit(temperature);
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16c:	0e 94 59 00 	call	0xb2	; 0xb2 <transmit>
 170:	08 95       	ret

00000172 <main>:
}
 
int main(void)
{
	uart_init();
 172:	0e 94 48 00 	call	0x90	; 0x90 <uart_init>
	DDRB = 0xff;
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	84 b9       	out	0x04, r24	; 4
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	83 ed       	ldi	r24, 0xD3	; 211
 17e:	90 e3       	ldi	r25, 0x30	; 48
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0xe>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x18>
 18a:	00 00       	nop
	_delay_ms(1000);
	int onoff;
	while (1) {
		
		if(UDR0 != 0x00){
 18c:	c6 ec       	ldi	r28, 0xC6	; 198
 18e:	d0 e0       	ldi	r29, 0x00	; 0
 190:	88 81       	ld	r24, Y
 192:	81 11       	cpse	r24, r1
			recieving();
 194:	0e 94 99 00 	call	0x132	; 0x132 <recieving>
		}
		UDR0 = 0x00;
 198:	18 82       	st	Y, r1
		sending();
 19a:	0e 94 a4 00 	call	0x148	; 0x148 <sending>
	}
 19e:	f8 cf       	rjmp	.-16     	; 0x190 <main+0x1e>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
