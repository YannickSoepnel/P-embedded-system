
pyserial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000210  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000092e  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075e  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d7  00000000  00000000  00001364  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  0000173c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000149  00000000  00000000  00001c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001d5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  88:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <uart_init>:


void uart_init()
{
	// set the baud rate
	UBRR0H = 0;
  90:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBBRVAL;     	// disable U2X mode
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0A = 0;		        // enable transmitter
  9a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = _BV(TXEN0); 	// enable receiver
  9e:	e1 ec       	ldi	r30, 0xC1	; 193
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	88 e0       	ldi	r24, 0x08	; 8
  a4:	80 83       	st	Z, r24
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	80 83       	st	Z, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  b0:	08 95       	ret

000000b2 <transmit>:
}
void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	95 ff       	sbrs	r25, 5
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <transmit+0x4>
	// send the data
	UDR0 = data;
  bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  c0:	08 95       	ret

000000c2 <receive>:
}
uint8_t receive()
{  
	loop_until_bit_is_set(UCSR0A, RXC0);  
  c2:	e0 ec       	ldi	r30, 0xC0	; 192
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 23       	and	r24, r24
  ca:	ec f7       	brge	.-6      	; 0xc6 <receive+0x4>
	return UDR0;   // return the data 
  cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  d0:	08 95       	ret

000000d2 <insertOutput>:
	
void insertOutput(int count)
{
	ultrasoonData = count;
  d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ultrasoonData>
	light = count + 1;
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	98 0f       	add	r25, r24
  da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <light>
	temperature = count + 2;	
  de:	8e 5f       	subi	r24, 0xFE	; 254
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  e4:	08 95       	ret

000000e6 <led>:
}

void led(uint8_t onoff){
  e6:	2a e0       	ldi	r18, 0x0A	; 10
  e8:	30 e0       	ldi	r19, 0x00	; 0
	int a;
	for(a = 0; a <10; a = a + 1){
		PORTB = 0x02;
  ea:	92 e0       	ldi	r25, 0x02	; 2
  ec:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	4f ef       	ldi	r20, 0xFF	; 255
  f0:	51 ee       	ldi	r21, 0xE1	; 225
  f2:	64 e0       	ldi	r22, 0x04	; 4
  f4:	41 50       	subi	r20, 0x01	; 1
  f6:	50 40       	sbci	r21, 0x00	; 0
  f8:	60 40       	sbci	r22, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <led+0xe>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <led+0x18>
  fe:	00 00       	nop
		_delay_ms(100);
		PORTB = 0x00;
 100:	15 b8       	out	0x05, r1	; 5
 102:	4f ef       	ldi	r20, 0xFF	; 255
 104:	51 ee       	ldi	r21, 0xE1	; 225
 106:	64 e0       	ldi	r22, 0x04	; 4
 108:	41 50       	subi	r20, 0x01	; 1
 10a:	50 40       	sbci	r21, 0x00	; 0
 10c:	60 40       	sbci	r22, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <led+0x22>
 110:	00 c0       	rjmp	.+0      	; 0x112 <led+0x2c>
 112:	00 00       	nop
 114:	21 50       	subi	r18, 0x01	; 1
 116:	31 09       	sbc	r19, r1
	temperature = count + 2;	
}

void led(uint8_t onoff){
	int a;
	for(a = 0; a <10; a = a + 1){
 118:	49 f7       	brne	.-46     	; 0xec <led+0x6>
		_delay_ms(100);
		PORTB = 0x00;
		_delay_ms(100);
	}
	
	if(onoff == 0x0f){		// check if a 0 is send
 11a:	8f 30       	cpi	r24, 0x0F	; 15
 11c:	19 f4       	brne	.+6      	; 0x124 <led+0x3e>
		PORTB = 0x01;		// turn led off
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	85 b9       	out	0x05, r24	; 5
 122:	08 95       	ret
	}
	else{
		PORTB = 0x04;		// turn led on
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	85 b9       	out	0x05, r24	; 5
 128:	08 95       	ret

0000012a <recieving>:
}


void recieving()
{
	temp = receive();
 12a:	0e 94 61 00 	call	0xc2	; 0xc2 <receive>
 12e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp>
	transmit(temp);
 132:	0e 94 59 00 	call	0xb2	; 0xb2 <transmit>
	led(temp);
 136:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <temp>
 13a:	0e 94 73 00 	call	0xe6	; 0xe6 <led>
 13e:	08 95       	ret

00000140 <sending>:
}

void sending()
{
	counter = counter + 1;
 140:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <counter>
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <counter>
	int thisisavalue = counter;
	insertOutput(thisisavalue);
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 69 00 	call	0xd2	; 0xd2 <insertOutput>
	transmit(ultrasoonData);
 150:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ultrasoonData>
 154:	0e 94 59 00 	call	0xb2	; 0xb2 <transmit>
	transmit(light);
 158:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <light>
 15c:	0e 94 59 00 	call	0xb2	; 0xb2 <transmit>
	transmit(temperature);
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 164:	0e 94 59 00 	call	0xb2	; 0xb2 <transmit>
 168:	08 95       	ret

0000016a <main>:
}
 
int main(void)
{
	uart_init();
 16a:	0e 94 48 00 	call	0x90	; 0x90 <uart_init>
	DDRB = 0xff;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	84 b9       	out	0x04, r24	; 4
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	83 ed       	ldi	r24, 0xD3	; 211
 176:	90 e3       	ldi	r25, 0x30	; 48
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0xe>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x18>
 182:	00 00       	nop
	_delay_ms(1000);
	while (1) {
		
		if(UDR0 != 0x00){
 184:	c6 ec       	ldi	r28, 0xC6	; 198
 186:	d0 e0       	ldi	r29, 0x00	; 0
 188:	88 81       	ld	r24, Y
 18a:	81 11       	cpse	r24, r1
			recieving();
 18c:	0e 94 95 00 	call	0x12a	; 0x12a <recieving>
		}
		UDR0 = 0x00;
 190:	18 82       	st	Y, r1
		sending();
 192:	0e 94 a0 00 	call	0x140	; 0x140 <sending>
	}
 196:	f8 cf       	rjmp	.-16     	; 0x188 <main+0x1e>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
