
lichtintensiteisensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000380  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab4  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d3  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c7  00000000  00000000  000016ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c3  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000268  00000000  00000000  000021db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002443  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 cc 00 	jmp	0x198	; 0x198 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 14 01 	call	0x228	; 0x228 <main>
  9e:	0c 94 84 01 	jmp	0x308	; 0x308 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ports>:
}
uint8_t receive()
{
	loop_until_bit_is_set(UCSR0A, RXC0);		
	return UDR0;
}
  a6:	17 b8       	out	0x07, r1	; 7
  a8:	53 98       	cbi	0x0a, 3	; 10
  aa:	52 9a       	sbi	0x0a, 2	; 10
  ac:	08 95       	ret

000000ae <init_timer>:
  ae:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  b2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  b6:	ef e6       	ldi	r30, 0x6F	; 111
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <start_timer>:
  c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  ca:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <gv_counter+0x1>
  ce:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <gv_counter>
  d2:	e1 e8       	ldi	r30, 0x81	; 129
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <init_ext_int>:
  de:	84 e0       	ldi	r24, 0x04	; 4
  e0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	8d bb       	out	0x1d, r24	; 29
  e8:	08 95       	ret

000000ea <send_trigger>:
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	80 e7       	ldi	r24, 0x70	; 112
  ee:	92 e0       	ldi	r25, 0x02	; 2
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <send_trigger+0x6>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <send_trigger+0x10>
  fa:	00 00       	nop
  fc:	5a 98       	cbi	0x0b, 2	; 11
  fe:	25 e0       	ldi	r18, 0x05	; 5
 100:	2a 95       	dec	r18
 102:	f1 f7       	brne	.-4      	; 0x100 <send_trigger+0x16>
 104:	00 00       	nop
 106:	5a 9a       	sbi	0x0b, 2	; 11
 108:	85 e3       	ldi	r24, 0x35	; 53
 10a:	8a 95       	dec	r24
 10c:	f1 f7       	brne	.-4      	; 0x10a <send_trigger+0x20>
 10e:	00 00       	nop
 110:	5a 98       	cbi	0x0b, 2	; 11
 112:	08 95       	ret

00000114 <calc_cm>:
 114:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 118:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	dc 01       	movw	r26, r24
 122:	99 27       	eor	r25, r25
 124:	88 27       	eor	r24, r24
 126:	bc 01       	movw	r22, r24
 128:	cd 01       	movw	r24, r26
 12a:	62 0f       	add	r22, r18
 12c:	73 1f       	adc	r23, r19
 12e:	81 1d       	adc	r24, r1
 130:	91 1d       	adc	r25, r1
 132:	20 ea       	ldi	r18, 0xA0	; 160
 134:	33 e0       	ldi	r19, 0x03	; 3
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	0e 94 43 01 	call	0x286	; 0x286 <__divmodsi4>
 13e:	c9 01       	movw	r24, r18
 140:	08 95       	ret

00000142 <uart_init>:
 142:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 146:	83 e3       	ldi	r24, 0x33	; 51
 148:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 14c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 150:	e1 ec       	ldi	r30, 0xC1	; 193
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	88 e0       	ldi	r24, 0x08	; 8
 156:	80 83       	st	Z, r24
 158:	88 e1       	ldi	r24, 0x18	; 24
 15a:	80 83       	st	Z, r24
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 162:	08 95       	ret

00000164 <transmit>:
 164:	e0 ec       	ldi	r30, 0xC0	; 192
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	90 81       	ld	r25, Z
 16a:	95 ff       	sbrs	r25, 5
 16c:	fd cf       	rjmp	.-6      	; 0x168 <transmit+0x4>
 16e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 172:	08 95       	ret

00000174 <init_adc>:
 174:	80 e6       	ldi	r24, 0x60	; 96
 176:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 17a:	87 e8       	ldi	r24, 0x87	; 135
 17c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 180:	08 95       	ret

00000182 <get_adc_value>:
 182:	ea e7       	ldi	r30, 0x7A	; 122
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	80 64       	ori	r24, 0x40	; 64
 18a:	80 83       	st	Z, r24
 18c:	80 81       	ld	r24, Z
 18e:	86 fd       	sbrc	r24, 6
 190:	fd cf       	rjmp	.-6      	; 0x18c <get_adc_value+0xa>
 192:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 196:	08 95       	ret

00000198 <__vector_2>:

ISR (INT1_vect)
{
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	2f 93       	push	r18
 1a4:	3f 93       	push	r19
 1a6:	4f 93       	push	r20
 1a8:	5f 93       	push	r21
 1aa:	6f 93       	push	r22
 1ac:	7f 93       	push	r23
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
	gv_echo = (~gv_echo) & 1;
 1ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1be:	80 95       	com	r24
 1c0:	81 70       	andi	r24, 0x01	; 1
 1c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	if (gv_echo){
 1c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1ca:	88 23       	and	r24, r24
 1cc:	19 f0       	breq	.+6      	; 0x1d4 <__vector_2+0x3c>
		start_timer();
 1ce:	0e 94 61 00 	call	0xc2	; 0xc2 <start_timer>
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__vector_2+0x40>
		} else {
		init_timer();
 1d4:	0e 94 57 00 	call	0xae	; 0xae <init_timer>
		
	}
}
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_13>:

ISR (TIMER1_OVF_vect)
{
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
	gv_counter++;
 208:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <gv_counter>
 20c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <gv_counter+0x1>
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <gv_counter+0x1>
 216:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <gv_counter>
}
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <main>:

int main(void)
{
	init_ext_int();
 228:	0e 94 6f 00 	call	0xde	; 0xde <init_ext_int>
    uart_init();
 22c:	0e 94 a1 00 	call	0x142	; 0x142 <uart_init>
	init_adc();
 230:	0e 94 ba 00 	call	0x174	; 0x174 <init_adc>
	init_timer();
 234:	0e 94 57 00 	call	0xae	; 0xae <init_timer>
	init_ports();
 238:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ports>
	sei();
 23c:	78 94       	sei
    while (1) 
    {
		
		send_trigger();
 23e:	0e 94 75 00 	call	0xea	; 0xea <send_trigger>
		uint16_t distance = calc_cm(gv_counter);
 242:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <gv_counter>
 246:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <gv_counter+0x1>
 24a:	0e 94 8a 00 	call	0x114	; 0x114 <calc_cm>
 24e:	c8 2f       	mov	r28, r24
		analog = get_adc_value();
 250:	0e 94 c1 00 	call	0x182	; 0x182 <get_adc_value>
 254:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <analog>
		transmit(0xf0);
 258:	80 ef       	ldi	r24, 0xF0	; 240
 25a:	0e 94 b2 00 	call	0x164	; 0x164 <transmit>
		//_delay_ms(50);
		transmit(distance);
 25e:	8c 2f       	mov	r24, r28
 260:	0e 94 b2 00 	call	0x164	; 0x164 <transmit>
		//_delay_ms(50);
		transmit(0x0f);
 264:	8f e0       	ldi	r24, 0x0F	; 15
 266:	0e 94 b2 00 	call	0x164	; 0x164 <transmit>
		//_delay_ms(50);
		transmit(analog);
 26a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <analog>
 26e:	0e 94 b2 00 	call	0x164	; 0x164 <transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	89 e6       	ldi	r24, 0x69	; 105
 276:	98 e1       	ldi	r25, 0x18	; 24
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0x50>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x5a>
 282:	00 00       	nop
 284:	dc cf       	rjmp	.-72     	; 0x23e <main+0x16>

00000286 <__divmodsi4>:
 286:	05 2e       	mov	r0, r21
 288:	97 fb       	bst	r25, 7
 28a:	1e f4       	brtc	.+6      	; 0x292 <__divmodsi4+0xc>
 28c:	00 94       	com	r0
 28e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__negsi2>
 292:	57 fd       	sbrc	r21, 7
 294:	07 d0       	rcall	.+14     	; 0x2a4 <__divmodsi4_neg2>
 296:	0e 94 62 01 	call	0x2c4	; 0x2c4 <__udivmodsi4>
 29a:	07 fc       	sbrc	r0, 7
 29c:	03 d0       	rcall	.+6      	; 0x2a4 <__divmodsi4_neg2>
 29e:	4e f4       	brtc	.+18     	; 0x2b2 <__divmodsi4_exit>
 2a0:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__negsi2>

000002a4 <__divmodsi4_neg2>:
 2a4:	50 95       	com	r21
 2a6:	40 95       	com	r20
 2a8:	30 95       	com	r19
 2aa:	21 95       	neg	r18
 2ac:	3f 4f       	sbci	r19, 0xFF	; 255
 2ae:	4f 4f       	sbci	r20, 0xFF	; 255
 2b0:	5f 4f       	sbci	r21, 0xFF	; 255

000002b2 <__divmodsi4_exit>:
 2b2:	08 95       	ret

000002b4 <__negsi2>:
 2b4:	90 95       	com	r25
 2b6:	80 95       	com	r24
 2b8:	70 95       	com	r23
 2ba:	61 95       	neg	r22
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
 2be:	8f 4f       	sbci	r24, 0xFF	; 255
 2c0:	9f 4f       	sbci	r25, 0xFF	; 255
 2c2:	08 95       	ret

000002c4 <__udivmodsi4>:
 2c4:	a1 e2       	ldi	r26, 0x21	; 33
 2c6:	1a 2e       	mov	r1, r26
 2c8:	aa 1b       	sub	r26, r26
 2ca:	bb 1b       	sub	r27, r27
 2cc:	fd 01       	movw	r30, r26
 2ce:	0d c0       	rjmp	.+26     	; 0x2ea <__udivmodsi4_ep>

000002d0 <__udivmodsi4_loop>:
 2d0:	aa 1f       	adc	r26, r26
 2d2:	bb 1f       	adc	r27, r27
 2d4:	ee 1f       	adc	r30, r30
 2d6:	ff 1f       	adc	r31, r31
 2d8:	a2 17       	cp	r26, r18
 2da:	b3 07       	cpc	r27, r19
 2dc:	e4 07       	cpc	r30, r20
 2de:	f5 07       	cpc	r31, r21
 2e0:	20 f0       	brcs	.+8      	; 0x2ea <__udivmodsi4_ep>
 2e2:	a2 1b       	sub	r26, r18
 2e4:	b3 0b       	sbc	r27, r19
 2e6:	e4 0b       	sbc	r30, r20
 2e8:	f5 0b       	sbc	r31, r21

000002ea <__udivmodsi4_ep>:
 2ea:	66 1f       	adc	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	88 1f       	adc	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	1a 94       	dec	r1
 2f4:	69 f7       	brne	.-38     	; 0x2d0 <__udivmodsi4_loop>
 2f6:	60 95       	com	r22
 2f8:	70 95       	com	r23
 2fa:	80 95       	com	r24
 2fc:	90 95       	com	r25
 2fe:	9b 01       	movw	r18, r22
 300:	ac 01       	movw	r20, r24
 302:	bd 01       	movw	r22, r26
 304:	cf 01       	movw	r24, r30
 306:	08 95       	ret

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
