
ultrasoontest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000033c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a9f  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c9  00000000  00000000  00000ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000497  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b2  00000000  00000000  000020fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000024b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  9e:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ports>:

//********** end display ***********

void init_ports(void)
{
	DDRB |=  0xFF;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 b9       	out	0x04, r24	; 4
	DDRD &=~ (1 << PIND3);
  ac:	53 98       	cbi	0x0a, 3	; 10
	DDRD |= (1 << PIND2);
  ae:	52 9a       	sbi	0x0a, 2	; 10
  b0:	08 95       	ret

000000b2 <init_timer>:

void init_timer(void)
// prescaling : max time = 2^16/16E6 = 4.1 ms, 4.1 >> 2.3, so no prescaling required
// normal mode, no prescale, stop timer
{
    TCCR1A = 0;
  b2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = 0;
  b6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 |= _BV(TOIE1);
  ba:	ef e6       	ldi	r30, 0x6F	; 111
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <start_timer>:
}

void start_timer(void)
{
	TCNT1 = 0;
  c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	gv_counter = 0;
  ce:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <gv_counter+0x1>
  d2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <gv_counter>
	TCCR1B |= _BV(CS10);
  d6:	e1 e8       	ldi	r30, 0x81	; 129
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	80 83       	st	Z, r24
  e0:	08 95       	ret

000000e2 <init_ext_int>:
}

void init_ext_int(void)
{
    // any change triggers ext interrupt 1
    EICRA = (1 << ISC10);
  e2:	84 e0       	ldi	r24, 0x04	; 4
  e4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    EIMSK = (1 << INT1);
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	8d bb       	out	0x1d, r24	; 29
  ec:	08 95       	ret

000000ee <send_trigger>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	80 e7       	ldi	r24, 0x70	; 112
  f2:	92 e0       	ldi	r25, 0x02	; 2
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <send_trigger+0x6>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <send_trigger+0x10>
  fe:	00 00       	nop
}

void send_trigger(void)
{
	_delay_ms(50);		//Restart HC-SR04
	PORTD &=~ (1 << PIND2);
 100:	5a 98       	cbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	25 e0       	ldi	r18, 0x05	; 5
 104:	2a 95       	dec	r18
 106:	f1 f7       	brne	.-4      	; 0x104 <send_trigger+0x16>
 108:	00 00       	nop
	_delay_us(1);
	PORTD |= (1 << PIND2); //Send 10us second pulse
 10a:	5a 9a       	sbi	0x0b, 2	; 11
 10c:	85 e3       	ldi	r24, 0x35	; 53
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <send_trigger+0x20>
 112:	00 00       	nop
	_delay_us(10);
	PORTD &=~ (1 << PIND2);
 114:	5a 98       	cbi	0x0b, 2	; 11
 116:	08 95       	ret

00000118 <calc_cm>:
}


uint16_t calc_cm(uint16_t counter)
{
    uint16_t result = (counter * 65536 + TCNT1) / (58 * 16);
 118:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 11c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	return result;
 120:	a0 e0       	ldi	r26, 0x00	; 0
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	dc 01       	movw	r26, r24
 126:	99 27       	eor	r25, r25
 128:	88 27       	eor	r24, r24
 12a:	bc 01       	movw	r22, r24
 12c:	cd 01       	movw	r24, r26
 12e:	62 0f       	add	r22, r18
 130:	73 1f       	adc	r23, r19
 132:	81 1d       	adc	r24, r1
 134:	91 1d       	adc	r25, r1
 136:	20 ea       	ldi	r18, 0xA0	; 160
 138:	33 e0       	ldi	r19, 0x03	; 3
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	0e 94 21 01 	call	0x242	; 0x242 <__divmodsi4>
}
 142:	c9 01       	movw	r24, r18
 144:	08 95       	ret

00000146 <uart_init>:

void uart_init()
{
	// set the baud rate
	UBRR0H = 0;
 146:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBBRVAL;     	// disable U2X mode
 14a:	83 e3       	ldi	r24, 0x33	; 51
 14c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0A = 0;		        // enable transmitter
 150:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = _BV(TXEN0); 	// enable receiver
 154:	e1 ec       	ldi	r30, 0xC1	; 193
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	88 e0       	ldi	r24, 0x08	; 8
 15a:	80 83       	st	Z, r24
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
 15c:	88 e1       	ldi	r24, 0x18	; 24
 15e:	80 83       	st	Z, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 166:	08 95       	ret

00000168 <transmit>:

void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 168:	e0 ec       	ldi	r30, 0xC0	; 192
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	90 81       	ld	r25, Z
 16e:	95 ff       	sbrs	r25, 5
 170:	fd cf       	rjmp	.-6      	; 0x16c <transmit+0x4>
	// send the data
	UDR0 = data;
 172:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 176:	08 95       	ret

00000178 <main>:
}


int main(void)
{
	init_ext_int();
 178:	0e 94 71 00 	call	0xe2	; 0xe2 <init_ext_int>
	init_timer();
 17c:	0e 94 59 00 	call	0xb2	; 0xb2 <init_timer>
	init_ports();
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ports>
	uart_init();
 184:	0e 94 a3 00 	call	0x146	; 0x146 <uart_init>
	sei();
 188:	78 94       	sei
	
	while(1){
		send_trigger();
 18a:	0e 94 77 00 	call	0xee	; 0xee <send_trigger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	80 e7       	ldi	r24, 0x70	; 112
 192:	92 e0       	ldi	r25, 0x02	; 2
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x1c>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x26>
 19e:	00 00       	nop
		_delay_ms(50);
		uint16_t distance = calc_cm(gv_counter);
 1a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <gv_counter>
 1a4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <gv_counter+0x1>
 1a8:	0e 94 8c 00 	call	0x118	; 0x118 <calc_cm>
		transmit(distance);		
 1ac:	0e 94 b4 00 	call	0x168	; 0x168 <transmit>
 1b0:	ec cf       	rjmp	.-40     	; 0x18a <main+0x12>

000001b2 <__vector_2>:
	}
    return 0;
}

ISR (INT1_vect)
{
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	2f 93       	push	r18
 1be:	3f 93       	push	r19
 1c0:	4f 93       	push	r20
 1c2:	5f 93       	push	r21
 1c4:	6f 93       	push	r22
 1c6:	7f 93       	push	r23
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
    gv_echo = (~gv_echo) & 1;
 1d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1d8:	80 95       	com	r24
 1da:	81 70       	andi	r24, 0x01	; 1
 1dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	if (gv_echo){
 1e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1e4:	88 23       	and	r24, r24
 1e6:	19 f0       	breq	.+6      	; 0x1ee <__vector_2+0x3c>
		start_timer();
 1e8:	0e 94 63 00 	call	0xc6	; 0xc6 <start_timer>
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <__vector_2+0x40>
	} else {
		init_timer();
 1ee:	0e 94 59 00 	call	0xb2	; 0xb2 <init_timer>
		
	}
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <__vector_13>:

ISR (TIMER1_OVF_vect)
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
	gv_counter++;
 222:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <gv_counter>
 226:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <gv_counter+0x1>
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <gv_counter+0x1>
 230:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <gv_counter>
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <__divmodsi4>:
 242:	05 2e       	mov	r0, r21
 244:	97 fb       	bst	r25, 7
 246:	1e f4       	brtc	.+6      	; 0x24e <__divmodsi4+0xc>
 248:	00 94       	com	r0
 24a:	0e 94 38 01 	call	0x270	; 0x270 <__negsi2>
 24e:	57 fd       	sbrc	r21, 7
 250:	07 d0       	rcall	.+14     	; 0x260 <__divmodsi4_neg2>
 252:	0e 94 40 01 	call	0x280	; 0x280 <__udivmodsi4>
 256:	07 fc       	sbrc	r0, 7
 258:	03 d0       	rcall	.+6      	; 0x260 <__divmodsi4_neg2>
 25a:	4e f4       	brtc	.+18     	; 0x26e <__divmodsi4_exit>
 25c:	0c 94 38 01 	jmp	0x270	; 0x270 <__negsi2>

00000260 <__divmodsi4_neg2>:
 260:	50 95       	com	r21
 262:	40 95       	com	r20
 264:	30 95       	com	r19
 266:	21 95       	neg	r18
 268:	3f 4f       	sbci	r19, 0xFF	; 255
 26a:	4f 4f       	sbci	r20, 0xFF	; 255
 26c:	5f 4f       	sbci	r21, 0xFF	; 255

0000026e <__divmodsi4_exit>:
 26e:	08 95       	ret

00000270 <__negsi2>:
 270:	90 95       	com	r25
 272:	80 95       	com	r24
 274:	70 95       	com	r23
 276:	61 95       	neg	r22
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	8f 4f       	sbci	r24, 0xFF	; 255
 27c:	9f 4f       	sbci	r25, 0xFF	; 255
 27e:	08 95       	ret

00000280 <__udivmodsi4>:
 280:	a1 e2       	ldi	r26, 0x21	; 33
 282:	1a 2e       	mov	r1, r26
 284:	aa 1b       	sub	r26, r26
 286:	bb 1b       	sub	r27, r27
 288:	fd 01       	movw	r30, r26
 28a:	0d c0       	rjmp	.+26     	; 0x2a6 <__udivmodsi4_ep>

0000028c <__udivmodsi4_loop>:
 28c:	aa 1f       	adc	r26, r26
 28e:	bb 1f       	adc	r27, r27
 290:	ee 1f       	adc	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	a2 17       	cp	r26, r18
 296:	b3 07       	cpc	r27, r19
 298:	e4 07       	cpc	r30, r20
 29a:	f5 07       	cpc	r31, r21
 29c:	20 f0       	brcs	.+8      	; 0x2a6 <__udivmodsi4_ep>
 29e:	a2 1b       	sub	r26, r18
 2a0:	b3 0b       	sbc	r27, r19
 2a2:	e4 0b       	sbc	r30, r20
 2a4:	f5 0b       	sbc	r31, r21

000002a6 <__udivmodsi4_ep>:
 2a6:	66 1f       	adc	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	88 1f       	adc	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	1a 94       	dec	r1
 2b0:	69 f7       	brne	.-38     	; 0x28c <__udivmodsi4_loop>
 2b2:	60 95       	com	r22
 2b4:	70 95       	com	r23
 2b6:	80 95       	com	r24
 2b8:	90 95       	com	r25
 2ba:	9b 01       	movw	r18, r22
 2bc:	ac 01       	movw	r20, r24
 2be:	bd 01       	movw	r22, r26
 2c0:	cf 01       	movw	r24, r30
 2c2:	08 95       	ret

000002c4 <_exit>:
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>
