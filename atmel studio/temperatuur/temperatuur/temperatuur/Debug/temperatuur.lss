
temperatuur.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000554  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  000005c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000911  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000763  00000000  00000000  00000fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cb  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000438  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014d  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000020f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 30       	cpi	r26, 0x0D	; 13
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  88:	0c 94 a8 02 	jmp	0x550	; 0x550 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <uart_init>:
float tempC;

void uart_init()
{
	// set the baud rate
	UBRR0H = 0;
  90:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBBRVAL;     	// disable U2X mode
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0A = 0;		        // enable transmitter
  9a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = _BV(TXEN0); 	// enable receiver
  9e:	e1 ec       	ldi	r30, 0xC1	; 193
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	88 e0       	ldi	r24, 0x08	; 8
  a4:	80 83       	st	Z, r24
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	80 83       	st	Z, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  b0:	08 95       	ret

000000b2 <init_adc>:

void init_adc()
{
	// ref=Vcc, left adjust the result (8 bit resolution),
	// select channel 0 (PC0 = input)
	ADMUX = (1<<REFS0)|(1<<ADLAR);
  b2:	80 e6       	ldi	r24, 0x60	; 96
  b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  b8:	87 e8       	ldi	r24, 0x87	; 135
  ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  be:	08 95       	ret

000000c0 <get_adc_value>:
}
uint8_t get_adc_value()
{
	ADCSRA |= (1<<ADSC); // start conversion
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
  ca:	80 81       	ld	r24, Z
  cc:	86 fd       	sbrc	r24, 6
  ce:	fd cf       	rjmp	.-6      	; 0xca <get_adc_value+0xa>
	return ADCH; // 8-bit resolution, left adjusted
  d0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  d4:	08 95       	ret

000000d6 <transmit>:

void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
  d6:	e0 ec       	ldi	r30, 0xC0	; 192
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	90 81       	ld	r25, Z
  dc:	95 ff       	sbrs	r25, 5
  de:	fd cf       	rjmp	.-6      	; 0xda <transmit+0x4>
	// send the data
	UDR0 = data;
  e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  e4:	08 95       	ret

000000e6 <receive>:
}

uint8_t receive()
{
	loop_until_bit_is_set(UCSR0A, RXC0);
  e6:	e0 ec       	ldi	r30, 0xC0	; 192
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 23       	and	r24, r24
  ee:	ec f7       	brge	.-6      	; 0xea <receive+0x4>
	return UDR0;   // return the data
  f0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  f4:	08 95       	ret

000000f6 <led>:

void led(uint8_t onoff){

	
	while(onoff == 0x0e){
  f6:	8e 30       	cpi	r24, 0x0E	; 14
  f8:	b1 f4       	brne	.+44     	; 0x126 <led+0x30>
		PORTB = 0x02;
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	39 e6       	ldi	r19, 0x69	; 105
 102:	98 e1       	ldi	r25, 0x18	; 24
 104:	21 50       	subi	r18, 0x01	; 1
 106:	30 40       	sbci	r19, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <led+0xe>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <led+0x18>
 10e:	00 00       	nop
		_delay_ms(500);
		PORTB = 0x00;
 110:	15 b8       	out	0x05, r1	; 5
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	39 e6       	ldi	r19, 0x69	; 105
 116:	98 e1       	ldi	r25, 0x18	; 24
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	30 40       	sbci	r19, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <led+0x22>
 120:	00 c0       	rjmp	.+0      	; 0x122 <led+0x2c>
 122:	00 00       	nop
 124:	eb cf       	rjmp	.-42     	; 0xfc <led+0x6>
		_delay_ms(500);
	}

	if(onoff == 0xff){                   //rode led gaat aan (hij is ingerold dus)
 126:	8f 3f       	cpi	r24, 0xFF	; 255
 128:	19 f4       	brne	.+6      	; 0x130 <led+0x3a>
		PORTB = 0x01;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	85 b9       	out	0x05, r24	; 5
 12e:	08 95       	ret
	}
	else if(onoff == 0x0f){               //Groene led gaat aan (hij is uitgerold dus)
 130:	8f 30       	cpi	r24, 0x0F	; 15
 132:	11 f4       	brne	.+4      	; 0x138 <led+0x42>
		PORTB = 0x04;
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	85 b9       	out	0x05, r24	; 5
 138:	08 95       	ret

0000013a <recieving>:
	}
}

void recieving()
{
 13a:	cf 93       	push	r28
	temp = receive();
 13c:	0e 94 73 00 	call	0xe6	; 0xe6 <receive>
 140:	c8 2f       	mov	r28, r24
 142:	68 2f       	mov	r22, r24
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 ad 01 	call	0x35a	; 0x35a <__floatunsisf>
 14e:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temp>
 152:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temp+0x1>
 156:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp+0x2>
 15a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <temp+0x3>
	led(temp);
 15e:	8c 2f       	mov	r24, r28
 160:	0e 94 7b 00 	call	0xf6	; 0xf6 <led>
}
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <main>:

int main(void)
{
    uart_init();
 168:	0e 94 48 00 	call	0x90	; 0x90 <uart_init>
	init_adc();
 16c:	0e 94 59 00 	call	0xb2	; 0xb2 <init_adc>
	DDRB = 0xff;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	84 b9       	out	0x04, r24	; 4
		tempC = (voltage - 0.5) * 100.0;
		tempC = tempC * 10;
		int sendtemp = tempC;
		transmit(0xff);
		transmit(sendtemp);
		if(UDR0 != 0x00){
 174:	c6 ec       	ldi	r28, 0xC6	; 198
 176:	d0 e0       	ldi	r29, 0x00	; 0
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	89 e6       	ldi	r24, 0x69	; 105
 17c:	98 e1       	ldi	r25, 0x18	; 24
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x16>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x20>
 188:	00 00       	nop
	init_adc();
	DDRB = 0xff;
    while (1) 
    {
		_delay_ms(500);
		analog = get_adc_value();
 18a:	0e 94 60 00 	call	0xc0	; 0xc0 <get_adc_value>
 18e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		voltage = analog * 0.004882814;
 192:	68 2f       	mov	r22, r24
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 af 01 	call	0x35e	; 0x35e <__floatsisf>
 19e:	23 e0       	ldi	r18, 0x03	; 3
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 ea       	ldi	r20, 0xA0	; 160
 1a4:	5b e3       	ldi	r21, 0x3B	; 59
 1a6:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
 1aa:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <voltage>
 1ae:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <voltage+0x1>
 1b2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <voltage+0x2>
 1b6:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <voltage+0x3>
		tempC = (voltage - 0.5) * 100.0;
		tempC = tempC * 10;
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	5f e3       	ldi	r21, 0x3F	; 63
 1c2:	0e 94 0a 01 	call	0x214	; 0x214 <__subsf3>
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	48 ec       	ldi	r20, 0xC8	; 200
 1cc:	52 e4       	ldi	r21, 0x42	; 66
 1ce:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	40 e2       	ldi	r20, 0x20	; 32
 1d8:	51 e4       	ldi	r21, 0x41	; 65
 1da:	0e 94 3b 02 	call	0x476	; 0x476 <__mulsf3>
 1de:	6b 01       	movw	r12, r22
 1e0:	7c 01       	movw	r14, r24
 1e2:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <tempC>
 1e6:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <tempC+0x1>
 1ea:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tempC+0x2>
 1ee:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <tempC+0x3>
		int sendtemp = tempC;
		transmit(0xff);
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	0e 94 6b 00 	call	0xd6	; 0xd6 <transmit>
		transmit(sendtemp);
 1f8:	c7 01       	movw	r24, r14
 1fa:	b6 01       	movw	r22, r12
 1fc:	0e 94 77 01 	call	0x2ee	; 0x2ee <__fixsfsi>
 200:	86 2f       	mov	r24, r22
 202:	0e 94 6b 00 	call	0xd6	; 0xd6 <transmit>
		if(UDR0 != 0x00){
 206:	88 81       	ld	r24, Y
 208:	88 23       	and	r24, r24
 20a:	09 f4       	brne	.+2      	; 0x20e <main+0xa6>
 20c:	b5 cf       	rjmp	.-150    	; 0x178 <main+0x10>
			recieving();
 20e:	0e 94 9d 00 	call	0x13a	; 0x13a <recieving>
 212:	b2 cf       	rjmp	.-156    	; 0x178 <main+0x10>

00000214 <__subsf3>:
 214:	50 58       	subi	r21, 0x80	; 128

00000216 <__addsf3>:
 216:	bb 27       	eor	r27, r27
 218:	aa 27       	eor	r26, r26
 21a:	0e 94 22 01 	call	0x244	; 0x244 <__addsf3x>
 21e:	0c 94 01 02 	jmp	0x402	; 0x402 <__fp_round>
 222:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fp_pscA>
 226:	38 f0       	brcs	.+14     	; 0x236 <__addsf3+0x20>
 228:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__fp_pscB>
 22c:	20 f0       	brcs	.+8      	; 0x236 <__addsf3+0x20>
 22e:	39 f4       	brne	.+14     	; 0x23e <__addsf3+0x28>
 230:	9f 3f       	cpi	r25, 0xFF	; 255
 232:	19 f4       	brne	.+6      	; 0x23a <__addsf3+0x24>
 234:	26 f4       	brtc	.+8      	; 0x23e <__addsf3+0x28>
 236:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__fp_nan>
 23a:	0e f4       	brtc	.+2      	; 0x23e <__addsf3+0x28>
 23c:	e0 95       	com	r30
 23e:	e7 fb       	bst	r30, 7
 240:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__fp_inf>

00000244 <__addsf3x>:
 244:	e9 2f       	mov	r30, r25
 246:	0e 94 12 02 	call	0x424	; 0x424 <__fp_split3>
 24a:	58 f3       	brcs	.-42     	; 0x222 <__addsf3+0xc>
 24c:	ba 17       	cp	r27, r26
 24e:	62 07       	cpc	r22, r18
 250:	73 07       	cpc	r23, r19
 252:	84 07       	cpc	r24, r20
 254:	95 07       	cpc	r25, r21
 256:	20 f0       	brcs	.+8      	; 0x260 <__addsf3x+0x1c>
 258:	79 f4       	brne	.+30     	; 0x278 <__addsf3x+0x34>
 25a:	a6 f5       	brtc	.+104    	; 0x2c4 <__addsf3x+0x80>
 25c:	0c 94 34 02 	jmp	0x468	; 0x468 <__fp_zero>
 260:	0e f4       	brtc	.+2      	; 0x264 <__addsf3x+0x20>
 262:	e0 95       	com	r30
 264:	0b 2e       	mov	r0, r27
 266:	ba 2f       	mov	r27, r26
 268:	a0 2d       	mov	r26, r0
 26a:	0b 01       	movw	r0, r22
 26c:	b9 01       	movw	r22, r18
 26e:	90 01       	movw	r18, r0
 270:	0c 01       	movw	r0, r24
 272:	ca 01       	movw	r24, r20
 274:	a0 01       	movw	r20, r0
 276:	11 24       	eor	r1, r1
 278:	ff 27       	eor	r31, r31
 27a:	59 1b       	sub	r21, r25
 27c:	99 f0       	breq	.+38     	; 0x2a4 <__addsf3x+0x60>
 27e:	59 3f       	cpi	r21, 0xF9	; 249
 280:	50 f4       	brcc	.+20     	; 0x296 <__addsf3x+0x52>
 282:	50 3e       	cpi	r21, 0xE0	; 224
 284:	68 f1       	brcs	.+90     	; 0x2e0 <__addsf3x+0x9c>
 286:	1a 16       	cp	r1, r26
 288:	f0 40       	sbci	r31, 0x00	; 0
 28a:	a2 2f       	mov	r26, r18
 28c:	23 2f       	mov	r18, r19
 28e:	34 2f       	mov	r19, r20
 290:	44 27       	eor	r20, r20
 292:	58 5f       	subi	r21, 0xF8	; 248
 294:	f3 cf       	rjmp	.-26     	; 0x27c <__addsf3x+0x38>
 296:	46 95       	lsr	r20
 298:	37 95       	ror	r19
 29a:	27 95       	ror	r18
 29c:	a7 95       	ror	r26
 29e:	f0 40       	sbci	r31, 0x00	; 0
 2a0:	53 95       	inc	r21
 2a2:	c9 f7       	brne	.-14     	; 0x296 <__addsf3x+0x52>
 2a4:	7e f4       	brtc	.+30     	; 0x2c4 <__addsf3x+0x80>
 2a6:	1f 16       	cp	r1, r31
 2a8:	ba 0b       	sbc	r27, r26
 2aa:	62 0b       	sbc	r22, r18
 2ac:	73 0b       	sbc	r23, r19
 2ae:	84 0b       	sbc	r24, r20
 2b0:	ba f0       	brmi	.+46     	; 0x2e0 <__addsf3x+0x9c>
 2b2:	91 50       	subi	r25, 0x01	; 1
 2b4:	a1 f0       	breq	.+40     	; 0x2de <__addsf3x+0x9a>
 2b6:	ff 0f       	add	r31, r31
 2b8:	bb 1f       	adc	r27, r27
 2ba:	66 1f       	adc	r22, r22
 2bc:	77 1f       	adc	r23, r23
 2be:	88 1f       	adc	r24, r24
 2c0:	c2 f7       	brpl	.-16     	; 0x2b2 <__addsf3x+0x6e>
 2c2:	0e c0       	rjmp	.+28     	; 0x2e0 <__addsf3x+0x9c>
 2c4:	ba 0f       	add	r27, r26
 2c6:	62 1f       	adc	r22, r18
 2c8:	73 1f       	adc	r23, r19
 2ca:	84 1f       	adc	r24, r20
 2cc:	48 f4       	brcc	.+18     	; 0x2e0 <__addsf3x+0x9c>
 2ce:	87 95       	ror	r24
 2d0:	77 95       	ror	r23
 2d2:	67 95       	ror	r22
 2d4:	b7 95       	ror	r27
 2d6:	f7 95       	ror	r31
 2d8:	9e 3f       	cpi	r25, 0xFE	; 254
 2da:	08 f0       	brcs	.+2      	; 0x2de <__addsf3x+0x9a>
 2dc:	b0 cf       	rjmp	.-160    	; 0x23e <__addsf3+0x28>
 2de:	93 95       	inc	r25
 2e0:	88 0f       	add	r24, r24
 2e2:	08 f0       	brcs	.+2      	; 0x2e6 <__addsf3x+0xa2>
 2e4:	99 27       	eor	r25, r25
 2e6:	ee 0f       	add	r30, r30
 2e8:	97 95       	ror	r25
 2ea:	87 95       	ror	r24
 2ec:	08 95       	ret

000002ee <__fixsfsi>:
 2ee:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__fixunssfsi>
 2f2:	68 94       	set
 2f4:	b1 11       	cpse	r27, r1
 2f6:	0c 94 35 02 	jmp	0x46a	; 0x46a <__fp_szero>
 2fa:	08 95       	ret

000002fc <__fixunssfsi>:
 2fc:	0e 94 1a 02 	call	0x434	; 0x434 <__fp_splitA>
 300:	88 f0       	brcs	.+34     	; 0x324 <__fixunssfsi+0x28>
 302:	9f 57       	subi	r25, 0x7F	; 127
 304:	98 f0       	brcs	.+38     	; 0x32c <__fixunssfsi+0x30>
 306:	b9 2f       	mov	r27, r25
 308:	99 27       	eor	r25, r25
 30a:	b7 51       	subi	r27, 0x17	; 23
 30c:	b0 f0       	brcs	.+44     	; 0x33a <__fixunssfsi+0x3e>
 30e:	e1 f0       	breq	.+56     	; 0x348 <__fixunssfsi+0x4c>
 310:	66 0f       	add	r22, r22
 312:	77 1f       	adc	r23, r23
 314:	88 1f       	adc	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	1a f0       	brmi	.+6      	; 0x320 <__fixunssfsi+0x24>
 31a:	ba 95       	dec	r27
 31c:	c9 f7       	brne	.-14     	; 0x310 <__fixunssfsi+0x14>
 31e:	14 c0       	rjmp	.+40     	; 0x348 <__fixunssfsi+0x4c>
 320:	b1 30       	cpi	r27, 0x01	; 1
 322:	91 f0       	breq	.+36     	; 0x348 <__fixunssfsi+0x4c>
 324:	0e 94 34 02 	call	0x468	; 0x468 <__fp_zero>
 328:	b1 e0       	ldi	r27, 0x01	; 1
 32a:	08 95       	ret
 32c:	0c 94 34 02 	jmp	0x468	; 0x468 <__fp_zero>
 330:	67 2f       	mov	r22, r23
 332:	78 2f       	mov	r23, r24
 334:	88 27       	eor	r24, r24
 336:	b8 5f       	subi	r27, 0xF8	; 248
 338:	39 f0       	breq	.+14     	; 0x348 <__fixunssfsi+0x4c>
 33a:	b9 3f       	cpi	r27, 0xF9	; 249
 33c:	cc f3       	brlt	.-14     	; 0x330 <__fixunssfsi+0x34>
 33e:	86 95       	lsr	r24
 340:	77 95       	ror	r23
 342:	67 95       	ror	r22
 344:	b3 95       	inc	r27
 346:	d9 f7       	brne	.-10     	; 0x33e <__fixunssfsi+0x42>
 348:	3e f4       	brtc	.+14     	; 0x358 <__fixunssfsi+0x5c>
 34a:	90 95       	com	r25
 34c:	80 95       	com	r24
 34e:	70 95       	com	r23
 350:	61 95       	neg	r22
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	8f 4f       	sbci	r24, 0xFF	; 255
 356:	9f 4f       	sbci	r25, 0xFF	; 255
 358:	08 95       	ret

0000035a <__floatunsisf>:
 35a:	e8 94       	clt
 35c:	09 c0       	rjmp	.+18     	; 0x370 <__floatsisf+0x12>

0000035e <__floatsisf>:
 35e:	97 fb       	bst	r25, 7
 360:	3e f4       	brtc	.+14     	; 0x370 <__floatsisf+0x12>
 362:	90 95       	com	r25
 364:	80 95       	com	r24
 366:	70 95       	com	r23
 368:	61 95       	neg	r22
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
 36c:	8f 4f       	sbci	r24, 0xFF	; 255
 36e:	9f 4f       	sbci	r25, 0xFF	; 255
 370:	99 23       	and	r25, r25
 372:	a9 f0       	breq	.+42     	; 0x39e <__floatsisf+0x40>
 374:	f9 2f       	mov	r31, r25
 376:	96 e9       	ldi	r25, 0x96	; 150
 378:	bb 27       	eor	r27, r27
 37a:	93 95       	inc	r25
 37c:	f6 95       	lsr	r31
 37e:	87 95       	ror	r24
 380:	77 95       	ror	r23
 382:	67 95       	ror	r22
 384:	b7 95       	ror	r27
 386:	f1 11       	cpse	r31, r1
 388:	f8 cf       	rjmp	.-16     	; 0x37a <__floatsisf+0x1c>
 38a:	fa f4       	brpl	.+62     	; 0x3ca <__floatsisf+0x6c>
 38c:	bb 0f       	add	r27, r27
 38e:	11 f4       	brne	.+4      	; 0x394 <__floatsisf+0x36>
 390:	60 ff       	sbrs	r22, 0
 392:	1b c0       	rjmp	.+54     	; 0x3ca <__floatsisf+0x6c>
 394:	6f 5f       	subi	r22, 0xFF	; 255
 396:	7f 4f       	sbci	r23, 0xFF	; 255
 398:	8f 4f       	sbci	r24, 0xFF	; 255
 39a:	9f 4f       	sbci	r25, 0xFF	; 255
 39c:	16 c0       	rjmp	.+44     	; 0x3ca <__floatsisf+0x6c>
 39e:	88 23       	and	r24, r24
 3a0:	11 f0       	breq	.+4      	; 0x3a6 <__floatsisf+0x48>
 3a2:	96 e9       	ldi	r25, 0x96	; 150
 3a4:	11 c0       	rjmp	.+34     	; 0x3c8 <__floatsisf+0x6a>
 3a6:	77 23       	and	r23, r23
 3a8:	21 f0       	breq	.+8      	; 0x3b2 <__floatsisf+0x54>
 3aa:	9e e8       	ldi	r25, 0x8E	; 142
 3ac:	87 2f       	mov	r24, r23
 3ae:	76 2f       	mov	r23, r22
 3b0:	05 c0       	rjmp	.+10     	; 0x3bc <__floatsisf+0x5e>
 3b2:	66 23       	and	r22, r22
 3b4:	71 f0       	breq	.+28     	; 0x3d2 <__floatsisf+0x74>
 3b6:	96 e8       	ldi	r25, 0x86	; 134
 3b8:	86 2f       	mov	r24, r22
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	2a f0       	brmi	.+10     	; 0x3ca <__floatsisf+0x6c>
 3c0:	9a 95       	dec	r25
 3c2:	66 0f       	add	r22, r22
 3c4:	77 1f       	adc	r23, r23
 3c6:	88 1f       	adc	r24, r24
 3c8:	da f7       	brpl	.-10     	; 0x3c0 <__floatsisf+0x62>
 3ca:	88 0f       	add	r24, r24
 3cc:	96 95       	lsr	r25
 3ce:	87 95       	ror	r24
 3d0:	97 f9       	bld	r25, 7
 3d2:	08 95       	ret

000003d4 <__fp_inf>:
 3d4:	97 f9       	bld	r25, 7
 3d6:	9f 67       	ori	r25, 0x7F	; 127
 3d8:	80 e8       	ldi	r24, 0x80	; 128
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	08 95       	ret

000003e0 <__fp_nan>:
 3e0:	9f ef       	ldi	r25, 0xFF	; 255
 3e2:	80 ec       	ldi	r24, 0xC0	; 192
 3e4:	08 95       	ret

000003e6 <__fp_pscA>:
 3e6:	00 24       	eor	r0, r0
 3e8:	0a 94       	dec	r0
 3ea:	16 16       	cp	r1, r22
 3ec:	17 06       	cpc	r1, r23
 3ee:	18 06       	cpc	r1, r24
 3f0:	09 06       	cpc	r0, r25
 3f2:	08 95       	ret

000003f4 <__fp_pscB>:
 3f4:	00 24       	eor	r0, r0
 3f6:	0a 94       	dec	r0
 3f8:	12 16       	cp	r1, r18
 3fa:	13 06       	cpc	r1, r19
 3fc:	14 06       	cpc	r1, r20
 3fe:	05 06       	cpc	r0, r21
 400:	08 95       	ret

00000402 <__fp_round>:
 402:	09 2e       	mov	r0, r25
 404:	03 94       	inc	r0
 406:	00 0c       	add	r0, r0
 408:	11 f4       	brne	.+4      	; 0x40e <__fp_round+0xc>
 40a:	88 23       	and	r24, r24
 40c:	52 f0       	brmi	.+20     	; 0x422 <__fp_round+0x20>
 40e:	bb 0f       	add	r27, r27
 410:	40 f4       	brcc	.+16     	; 0x422 <__fp_round+0x20>
 412:	bf 2b       	or	r27, r31
 414:	11 f4       	brne	.+4      	; 0x41a <__fp_round+0x18>
 416:	60 ff       	sbrs	r22, 0
 418:	04 c0       	rjmp	.+8      	; 0x422 <__fp_round+0x20>
 41a:	6f 5f       	subi	r22, 0xFF	; 255
 41c:	7f 4f       	sbci	r23, 0xFF	; 255
 41e:	8f 4f       	sbci	r24, 0xFF	; 255
 420:	9f 4f       	sbci	r25, 0xFF	; 255
 422:	08 95       	ret

00000424 <__fp_split3>:
 424:	57 fd       	sbrc	r21, 7
 426:	90 58       	subi	r25, 0x80	; 128
 428:	44 0f       	add	r20, r20
 42a:	55 1f       	adc	r21, r21
 42c:	59 f0       	breq	.+22     	; 0x444 <__fp_splitA+0x10>
 42e:	5f 3f       	cpi	r21, 0xFF	; 255
 430:	71 f0       	breq	.+28     	; 0x44e <__fp_splitA+0x1a>
 432:	47 95       	ror	r20

00000434 <__fp_splitA>:
 434:	88 0f       	add	r24, r24
 436:	97 fb       	bst	r25, 7
 438:	99 1f       	adc	r25, r25
 43a:	61 f0       	breq	.+24     	; 0x454 <__fp_splitA+0x20>
 43c:	9f 3f       	cpi	r25, 0xFF	; 255
 43e:	79 f0       	breq	.+30     	; 0x45e <__fp_splitA+0x2a>
 440:	87 95       	ror	r24
 442:	08 95       	ret
 444:	12 16       	cp	r1, r18
 446:	13 06       	cpc	r1, r19
 448:	14 06       	cpc	r1, r20
 44a:	55 1f       	adc	r21, r21
 44c:	f2 cf       	rjmp	.-28     	; 0x432 <__fp_split3+0xe>
 44e:	46 95       	lsr	r20
 450:	f1 df       	rcall	.-30     	; 0x434 <__fp_splitA>
 452:	08 c0       	rjmp	.+16     	; 0x464 <__fp_splitA+0x30>
 454:	16 16       	cp	r1, r22
 456:	17 06       	cpc	r1, r23
 458:	18 06       	cpc	r1, r24
 45a:	99 1f       	adc	r25, r25
 45c:	f1 cf       	rjmp	.-30     	; 0x440 <__fp_splitA+0xc>
 45e:	86 95       	lsr	r24
 460:	71 05       	cpc	r23, r1
 462:	61 05       	cpc	r22, r1
 464:	08 94       	sec
 466:	08 95       	ret

00000468 <__fp_zero>:
 468:	e8 94       	clt

0000046a <__fp_szero>:
 46a:	bb 27       	eor	r27, r27
 46c:	66 27       	eor	r22, r22
 46e:	77 27       	eor	r23, r23
 470:	cb 01       	movw	r24, r22
 472:	97 f9       	bld	r25, 7
 474:	08 95       	ret

00000476 <__mulsf3>:
 476:	0e 94 4e 02 	call	0x49c	; 0x49c <__mulsf3x>
 47a:	0c 94 01 02 	jmp	0x402	; 0x402 <__fp_round>
 47e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fp_pscA>
 482:	38 f0       	brcs	.+14     	; 0x492 <__mulsf3+0x1c>
 484:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__fp_pscB>
 488:	20 f0       	brcs	.+8      	; 0x492 <__mulsf3+0x1c>
 48a:	95 23       	and	r25, r21
 48c:	11 f0       	breq	.+4      	; 0x492 <__mulsf3+0x1c>
 48e:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__fp_inf>
 492:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__fp_nan>
 496:	11 24       	eor	r1, r1
 498:	0c 94 35 02 	jmp	0x46a	; 0x46a <__fp_szero>

0000049c <__mulsf3x>:
 49c:	0e 94 12 02 	call	0x424	; 0x424 <__fp_split3>
 4a0:	70 f3       	brcs	.-36     	; 0x47e <__mulsf3+0x8>

000004a2 <__mulsf3_pse>:
 4a2:	95 9f       	mul	r25, r21
 4a4:	c1 f3       	breq	.-16     	; 0x496 <__mulsf3+0x20>
 4a6:	95 0f       	add	r25, r21
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	55 1f       	adc	r21, r21
 4ac:	62 9f       	mul	r22, r18
 4ae:	f0 01       	movw	r30, r0
 4b0:	72 9f       	mul	r23, r18
 4b2:	bb 27       	eor	r27, r27
 4b4:	f0 0d       	add	r31, r0
 4b6:	b1 1d       	adc	r27, r1
 4b8:	63 9f       	mul	r22, r19
 4ba:	aa 27       	eor	r26, r26
 4bc:	f0 0d       	add	r31, r0
 4be:	b1 1d       	adc	r27, r1
 4c0:	aa 1f       	adc	r26, r26
 4c2:	64 9f       	mul	r22, r20
 4c4:	66 27       	eor	r22, r22
 4c6:	b0 0d       	add	r27, r0
 4c8:	a1 1d       	adc	r26, r1
 4ca:	66 1f       	adc	r22, r22
 4cc:	82 9f       	mul	r24, r18
 4ce:	22 27       	eor	r18, r18
 4d0:	b0 0d       	add	r27, r0
 4d2:	a1 1d       	adc	r26, r1
 4d4:	62 1f       	adc	r22, r18
 4d6:	73 9f       	mul	r23, r19
 4d8:	b0 0d       	add	r27, r0
 4da:	a1 1d       	adc	r26, r1
 4dc:	62 1f       	adc	r22, r18
 4de:	83 9f       	mul	r24, r19
 4e0:	a0 0d       	add	r26, r0
 4e2:	61 1d       	adc	r22, r1
 4e4:	22 1f       	adc	r18, r18
 4e6:	74 9f       	mul	r23, r20
 4e8:	33 27       	eor	r19, r19
 4ea:	a0 0d       	add	r26, r0
 4ec:	61 1d       	adc	r22, r1
 4ee:	23 1f       	adc	r18, r19
 4f0:	84 9f       	mul	r24, r20
 4f2:	60 0d       	add	r22, r0
 4f4:	21 1d       	adc	r18, r1
 4f6:	82 2f       	mov	r24, r18
 4f8:	76 2f       	mov	r23, r22
 4fa:	6a 2f       	mov	r22, r26
 4fc:	11 24       	eor	r1, r1
 4fe:	9f 57       	subi	r25, 0x7F	; 127
 500:	50 40       	sbci	r21, 0x00	; 0
 502:	9a f0       	brmi	.+38     	; 0x52a <__mulsf3_pse+0x88>
 504:	f1 f0       	breq	.+60     	; 0x542 <__mulsf3_pse+0xa0>
 506:	88 23       	and	r24, r24
 508:	4a f0       	brmi	.+18     	; 0x51c <__mulsf3_pse+0x7a>
 50a:	ee 0f       	add	r30, r30
 50c:	ff 1f       	adc	r31, r31
 50e:	bb 1f       	adc	r27, r27
 510:	66 1f       	adc	r22, r22
 512:	77 1f       	adc	r23, r23
 514:	88 1f       	adc	r24, r24
 516:	91 50       	subi	r25, 0x01	; 1
 518:	50 40       	sbci	r21, 0x00	; 0
 51a:	a9 f7       	brne	.-22     	; 0x506 <__mulsf3_pse+0x64>
 51c:	9e 3f       	cpi	r25, 0xFE	; 254
 51e:	51 05       	cpc	r21, r1
 520:	80 f0       	brcs	.+32     	; 0x542 <__mulsf3_pse+0xa0>
 522:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__fp_inf>
 526:	0c 94 35 02 	jmp	0x46a	; 0x46a <__fp_szero>
 52a:	5f 3f       	cpi	r21, 0xFF	; 255
 52c:	e4 f3       	brlt	.-8      	; 0x526 <__mulsf3_pse+0x84>
 52e:	98 3e       	cpi	r25, 0xE8	; 232
 530:	d4 f3       	brlt	.-12     	; 0x526 <__mulsf3_pse+0x84>
 532:	86 95       	lsr	r24
 534:	77 95       	ror	r23
 536:	67 95       	ror	r22
 538:	b7 95       	ror	r27
 53a:	f7 95       	ror	r31
 53c:	e7 95       	ror	r30
 53e:	9f 5f       	subi	r25, 0xFF	; 255
 540:	c1 f7       	brne	.-16     	; 0x532 <__mulsf3_pse+0x90>
 542:	fe 2b       	or	r31, r30
 544:	88 0f       	add	r24, r24
 546:	91 1d       	adc	r25, r1
 548:	96 95       	lsr	r25
 54a:	87 95       	ror	r24
 54c:	97 f9       	bld	r25, 7
 54e:	08 95       	ret

00000550 <_exit>:
 550:	f8 94       	cli

00000552 <__stop_program>:
 552:	ff cf       	rjmp	.-2      	; 0x552 <__stop_program>
